package main

import (
	"context"
	"log"
	"os"

	"github.com/yaegashi/msgraph.go/jsonx"
	"github.com/yaegashi/msgraph.go/msauth"
	msgraph "github.com/yaegashi/msgraph.go/v1.0"
	"golang.org/x/oauth2"
)

const (
	tenantID       = "consumers"
	clientID       = "47eb8dd1-1d88-4906-bd34-5dc476ec70d4"
	clientSecret   = "2_i8Q~93D6vjFRvq.RK9ZE6i8X_e4~hxkmJUyaoD"
	tokenCachePath = "token.json"
)

var scopes = []string{".default"}

func dump(o interface{}) {
	enc := jsonx.NewEncoder(os.Stdout)
	enc.SetIndent("", "  ")
	enc.Encode(o)
}

func main() {
	ctx := context.Background()
	m := msauth.NewManager()
	m.LoadFile(tokenCachePath)
	ts, err := m.ClientCredentialsGrant(ctx, tenantID, clientID, clientSecret, scopes)
	if err != nil {
		log.Fatal(err)
	}
	m.SaveFile(tokenCachePath)

	httpClient := oauth2.NewClient(ctx, ts)
	graphClient := msgraph.NewClient(httpClient)

	{
		log.Printf("Get current logged in user information")
		req := graphClient.Me().Request()
		log.Printf("GET %s", req.URL())
		user, err := req.Get(ctx)
		if err == nil {
			dump(user)
		} else {
			log.Println(err)
		}
	}

	// {
	// 	log.Println("Get current logged in user's first 10 events")
	// 	req := graphClient.Me().Events().Request()
	// 	req.Top(10)
	// 	tzname, err := wtz.LocationToName(time.Local)
	// 	if err != nil {
	// 		log.Println(err)
	// 		tzname = "Tokyo Standard Time"
	// 	}
	// 	req.Header().Add("Prefer", fmt.Sprintf(`outlook.timezone="%s"`, tzname))
	// 	log.Printf("GET %s", req.URL())
	// 	events, err := req.GetN(ctx, 1)
	// 	if err == nil {
	// 		dump(events)
	// 	} else {
	// 		log.Println(err)
	// 	}
	// }

	// var items []msgraph.DriveItem
	// {
	// 	log.Printf("Get files in the root folder of user's drive")
	// 	req := graphClient.Me().Drive().Root().Children().Request()
	// 	// This filter is not supported by OneDrive for Business or SharePoint Online
	// 	// https://docs.microsoft.com/en-us/onedrive/developer/rest-api/concepts/filtering-results?#filterable-properties
	// 	// req.Filter("file ne null")
	// 	log.Printf("GET %s", req.URL())
	// 	items, err = req.Get(ctx)
	// 	if err != nil {
	// 		log.Println(err)
	// 	}
	// }

	// for _, item := range items {
	// 	timestamp := item.LastModifiedDateTime.Format(time.RFC3339)
	// 	itemType := "FILE"
	// 	if item.File == nil {
	// 		itemType = "DIR "
	// 	}
	// 	log.Printf("  %s %s %10d %s", itemType, timestamp, *item.Size, *item.Name)
	// }

	// fmt.Print("Press ENTER to download files or Ctrl-C to abort: ")
	// fmt.Scanln()

	// for _, item := range items {
	// 	if item.File == nil {
	// 		continue
	// 	}
	// 	err := func() error {
	// 		log.Printf("Download %q (%d bytes)", *item.Name, *item.Size)
	// 		if url, ok := item.GetAdditionalData("@microsoft.graph.downloadUrl"); ok {
	// 			res, err := http.Get(url.(string))
	// 			if err != nil {
	// 				return err
	// 			}
	// 			defer res.Body.Close()
	// 			if res.StatusCode != http.StatusOK {
	// 				b, _ := ioutil.ReadAll(res.Body)
	// 				return fmt.Errorf("%s: %s", res.Status, string(b))
	// 			}
	// 			f, err := os.Create(*item.Name)
	// 			if err != nil {
	// 				return err
	// 			}
	// 			defer f.Close()
	// 			_, err = io.Copy(f, res.Body)
	// 			if err != nil {
	// 				return err
	// 			}
	// 		} else {
	// 			return fmt.Errorf("unknown download URL")
	// 		}
	// 		return nil
	// 	}()
	// 	if err != nil {
	// 		log.Println(err)
	// 	}
	// }
}
